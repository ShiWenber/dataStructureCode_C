package ynu.ls.coloring;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.SimpleFileVisitor;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;
import java.util.Vector;
import java.util.stream.IntStream;

import javax.management.relation.RelationSupportMBean;
import javax.print.event.PrintEvent;

public class TabuColoring {
	private Graph G;
	// 颜色数
	private int nbColor;
	// 二维表作为禁忌表，第0列表顶点，第1列-第k列表示颜色，值为禁忌次数
	private int[][] tabuTable;
	private int[][] moveScore;
	private int[][] moveScore2;
	private int[] best_sol;
	private int[][] adj_score;
	private int iter;
	private int[][] conflict_edges;

	public TabuColoring(Graph G, int nbColor) {
		this.G = G;
		this.nbColor = 52;
		this.tabuTable = new int[G.verNum + 1][this.nbColor + 1];
		this.moveScore = new int[G.verNum + 1][this.nbColor + 1]; // moveScore[i][j] 表示顶点i的颜色变为j时的分数，分数越大越好
		this.moveScore2 = new int[G.verNum + 1][this.nbColor + 1]; // moveScore2[i][j] 表示顶点i的颜色变为j时的分数，分数越大越好
		this.best_sol = new int[G.verNum + 1];
		this.iter = 1;
		this.adj_score = new int[G.verNum + 1][this.nbColor + 1];
		// 初始化随机解
		for (int i = 1; i < G.verNum + 1; i++) {
			// 产生从1~nbColor的随机数
			best_sol[i] = (int) (Math.random() * this.nbColor) + 1;
		}

		// 初始化最优解，这样记录最优解的时候方便跟禁忌中找到的局部最优解比较，todo:但是比较耗时
		// int sol_best[] = sol.clone(); // 是深拷贝？ TODO
		// int sol_best[] = Arrays.copyOf(sol, sol.length);

		// 初始化禁忌表和移动评分表
		for (int i = 1; i < G.verNum + 1; i++) {
			for (int j = 1; j < nbColor + 1; j++) {
				tabuTable[i][j] = 0;
				moveScore[i][j] = 0;
				adj_score[i][j] = 0;
			}
		}

		// 初始化移动评分表
		calMoveScore(best_sol, moveScore);
		// calMoveScore(best_sol, moveScore2);

		calAdjScore(best_sol);

		// 解评分，仅计算初始化的一次，后面只做增量式更新
		int conflict = calConflict(best_sol);
	}

	/**
	 * 执行禁忌搜索，返回解 sol[i] 表示第 i 个顶点的颜色
	 * 
	 * @return
	 */
	public int[] search() {
		long startTime = System.currentTimeMillis();
		// 改变conflict_edges[0]和conflict_edges[1]的颜色，跳出局部最优解
		// // 遍历conflict_edges
		if (conflict_edges != null) {
			for (int i = 0; i < conflict_edges.length; i++) {
				// 冲突边有重复只需要随机改变一个顶点的颜色即可
				best_sol[conflict_edges[i][0]] = (int) (Math.random() * nbColor) + 1;
				// best_sol[conflict_edges[i][1]] = (int) (Math.random() * nbColor) + 1;
			}
		}

		// 随机挑选50%的节点，随机改变颜色，当该比例为1的时候，相当于退化为随机初始化
		Random random = new Random();
		Set<Integer> set = new HashSet<>();
		while (set.size() < G.verNum * 0.20) {
			set.add(random.nextInt(G.verNum) + 1);
		}
		int[] idx = set.stream().mapToInt(Integer::valueOf).toArray();
		// 随机改变颜色
		for (int i = 0; i < idx.length; i++) {
			best_sol[idx[i]] = (int) (Math.random() * nbColor) + 1;
		}

		// stream.parallel() 并行流加速
		IntStream.range(1, G.verNum + 1).parallel().forEach(i -> {
			IntStream.range(1, nbColor + 1).parallel().forEach(j -> {
				tabuTable[i][j] = 0;
				moveScore[i][j] = 0;
				adj_score[i][j] = 0;
			});
		});
		// 初始化移动评分表
		calMoveScore(best_sol, moveScore);
		// calMoveScore(best_sol, moveScore2);

		calAdjScore(best_sol);

		// 解评分，仅计算初始化的一次，后面只做增量式更新
		int conflict = calConflict(best_sol);

		iter = 1; // 迭代次数
		int max_iter = 500000; // 最大迭代次数
		int randIdx = 50; // 禁忌表中随机选择的禁忌次数
		int sm_randIdx = 500; // 禁忌表中随机选择的禁忌次数
		// 注意一个iter才更新一次sol，且只有比sol_best好的才更新sol_best
		while (conflict > 0 && iter < max_iter) {
			// int tt = iter + (int) (1.0 / conflict * randInt(randIdx)) + randInt(sm_randIdx);
			// int tt = iter + (int) (iter * (randInt(10) / 10.0)) + randInt(sm_randIdx);
			// int tt = iter + randInt(sm_randIdx) * (max_iter - iter) / max_iter;
			// + (int) (1.0 / conflict * randInt(randIdx))
			int tt = iter + conflict + randInt(sm_randIdx);

			System.out.println("conflict: " + conflict);
			// // 输出轮数
			System.out.print("---------iter: ");
			System.out.println(iter);
			// choose a best move (v, c_i, c_j) from non-tabu moves
			// 有非禁忌移动就从非禁忌移动中选择一个最好的，否则从禁忌移动中选择第一个move-score为正的
			int flag = 0; // 一次iter 中是否存在非禁忌的移动
			int break_to_while = 0; // 是否跳出for循环
			// 记录在禁忌期的最优移动
			int maxMoveScore = moveScore[1][1]; // 一次iter 中最大的move-score
			int bestMove_v = 1;
			int bestMoveColor_j = 1;
			if (tabuTable[1][1] >= iter) {
				flag = 1;
			}

			// int max_score = ; // 一次iter 中最大的move-score
			for (int i = 1; i < G.verNum + 1; i++) {
				// 若当前点已经无冲突
				if (adj_score[i][best_sol[i]] == 0) {
					continue;
				}
				for (int j = 1; j < nbColor + 1; j++) {

					// 从不禁忌的移动中选择第一个能优化当前解的
					if (tabuTable[i][j] >= iter && moveScore[i][j] > 0) {
						int conflictDelta = -moveScore[i][j];
						// System.out.print("conflict: ");
						// System.out.println(calConflict(sol));
						tabuTable[i][best_sol[i]] = tt;
						if (conflictDelta < 0) {
							// move(sol, i, sol[i], j);
							move(best_sol, i, best_sol[i], j);
							assert (best_sol[i] == j);
							assert (calConflict(best_sol) == conflict + conflictDelta);
							conflict += conflictDelta;
						}
						// printTabu(tabuTable);
						// printMoveScore(moveScore);
						iter++;
						break_to_while = 1;
						flag = 0;
						break; // 跳出到while循环
					} else {
						// 如果没有非禁忌的移动，就从禁忌的移动中选择一个最好的
						// 记录所有的分数，找出最大的分数
						if (moveScore[i][j] > maxMoveScore && tabuTable[i][j] < iter) {
							// 随机接受一个分数最好的禁忌移动
							if (moveScore[i][j] == maxMoveScore && randInt(1) > 0.5) {
								maxMoveScore = moveScore[i][j];
								bestMove_v = i;
								bestMoveColor_j = j;
								flag = 1;
							} else if (moveScore[i][j] != maxMoveScore) {
								maxMoveScore = moveScore[i][j];
								bestMove_v = i;
								bestMoveColor_j = j;
								flag = 1;
							}
						}
						// 存在一种情况flag为0，maxMoveScore为moveScore[1][1]，但是这个移动是禁忌的，而且不存在非禁忌且比moveScore[1][1]更好的移动
					}
				}
				if (break_to_while == 1) {
					break;
				}
			}
			// 非禁忌的移动中，找到一个最优的移动
			if (flag == 1) {
				int conflictDelta = -moveScore[bestMove_v][bestMoveColor_j];
				System.out.println("bestMove: " + bestMove_v + " " + bestMoveColor_j + " " + conflictDelta);
				tabuTable[bestMove_v][best_sol[bestMove_v]] = tt;
				move(best_sol, bestMove_v, best_sol[bestMove_v], bestMoveColor_j);
				assert (best_sol[bestMove_v] == bestMoveColor_j);
				// System.out.print("conlict: ");
				// System.out.println(calConflict(sol));
				assert (calConflict(best_sol) == conflict + conflictDelta);
				conflict += conflictDelta;
				// printTabu(tabuTable);
				// printMoveScore(moveScore);
				iter++;
			} else {
				// 存在一种情况flag为0，maxMoveScore为moveScore[1][1]，但是这个移动是非禁忌的，而且不存在禁忌且比moveScore[1][1]更好的移动
				// 那么不做任何动作，直接进入下一次迭代
				iter++;
			}
			// if (temp_iter == iter) {
			// printMoveScore(moveScore);
			// printMoveScore(tabuTable);
			// }
		}
		// if (conflict == 1) {
		// printMoveScore(moveScore);
		// printMoveScore(tabuTable);
		// // 通过输入暂时阻塞在此处
		// Scanner sc = new Scanner(System.in);
		// sc.nextLine();
		// System.out.println("conflict: " + conflict);
		// }
		// System.out.println(iter);
		// System.out.println(calConflict(sol_best));
		// assert (calConflict(best_sol) == 0);
		long endTime = System.currentTimeMillis();
		long runTime = endTime - startTime;
		System.out.println("runTime: " + runTime);
		System.out.println("con:" + calConflict(best_sol));
		System.out.println("2con: " + conflict);

		this.conflict_edges = new int[conflict * 2][2];
		int index = 0;
		for (int v = 1; v <= G.verNum; v++) {
			int color = best_sol[v];
			for (int neibor : G.getNeighbors(v)) {
				assert (best_sol[neibor] >= 1 && best_sol[neibor] <= nbColor);
				if (best_sol[neibor] == color) {
					// 输出冲突的边
					System.out.printf("conflict edge: (%d, %d), color: %d\n", v, neibor, color);
					// 输出sol
					this.conflict_edges[index][0] = v;
					this.conflict_edges[index][1] = neibor;
					index++;
					// System.out.println(Arrays.toString(sol));
					System.out.println("failed!");
				}
			}
		}
		return best_sol;
	}

	private void printTabu(int[][] tabuTable) {
		for (int i = 1; i < G.verNum + 1; i++) {
			for (int j = 1; j < nbColor + 1; j++) {
				System.out.print(tabuTable[i][j]);
				System.out.print(",");
			}
			System.out.println("");
		}
		System.out.println("---------------------");
	}

	private void printMoveScore(int[][] moveScore) {
		for (int i = 1; i < G.verNum + 1; i++) {
			for (int j = 1; j < nbColor + 1; j++) {
				System.out.print(moveScore[i][j]);
				System.out.print(",");
			}
			System.out.println();
		}
		System.out.println("---------------------");
	}

	/**
	 * 产生随机整数
	 * 
	 * @param i
	 * @return
	 */
	private int randInt(int i) {
		return (int) (Math.random() * i);
	}

	/**
	 * 计算冲突数
	 * 
	 * @param sol
	 * @return
	 */
	public int calConflict(int[] sol) {
		int res = 0;
		for (int i = 1; i < G.verNum + 1; i++) {
			ArrayList<Integer> neighbors = G.getNeighbors(i);
			// todo
			for (int v : neighbors) {
				if (sol[v] == sol[i]) {
					res++;
				}
			}
		}
		assert (res % 2 == 0);
		// 冲突边会重复计算，因此要除以2
		return res / 2;
	}

	/**
	 * 计算移动评分表
	 * 
	 * @param sol
	 */
	public void calMoveScore(int[] sol, int[][] moveScore2) {
		int conflict_neighbor_origin = 0;
		int conflict_neighbor_new = 0;
		for (int i = 1; i < G.verNum + 1; i++) {
			for (int color = 1; color < nbColor + 1; color++) {
				conflict_neighbor_new = 0;
				conflict_neighbor_origin = 0;
				// 计算原有冲突数
				ArrayList<Integer> neighbors = G.getNeighbors(i);
				for (int v : neighbors) {
					if (sol[v] == sol[i]) {
						conflict_neighbor_origin++;
					}
					if (sol[v] == color) {
						conflict_neighbor_new++;
					}
				}
				moveScore2[i][color] = conflict_neighbor_origin - conflict_neighbor_new;
			}
		}
	}

	/**
	 * 移动顶点并更新moveScore,sol表
	 * 
	 * @param best_sol 当前解
	 * @param v        改变的顶点
	 * @param c_i      顶点原来的颜色
	 * @param c_j      顶点改变后的颜色
	 * @return 返回冲突数的变化
	 */
	public void move(int[] best_sol, int v, int c_i, int c_j) {
		// 更新范围：v和v的邻居
		// 更新邻居的moveScore
		best_sol[v] = c_j;

		// // 更新 adj_score
		ArrayList<Integer> neighbors = G.getNeighbors(v);
		for (int u : neighbors) {
			this.adj_score[u][c_i]--;
			this.adj_score[u][c_j]++;
		}
		// 更新moveScore
		for (int c = 1; c < nbColor + 1; c++) {
			moveScore[v][c] = adj_score[v][best_sol[v]] - adj_score[v][c];
		}
		for (int u : neighbors) {
			for (int color = 1; color < nbColor + 1; color++) {
				moveScore[u][color] = adj_score[u][best_sol[u]] - adj_score[u][color];
			}
		}
	}

	/**
	 * 对比两个二维数组，查看数据是否一致
	 * 
	 * @param moveScore
	 * @param moveScore2
	 * @return
	 */
	public boolean equal_array(int[][] moveScore, int[][] moveScore2) {
		for (int i = 1; i < G.verNum + 1; i++) {
			for (int j = 1; j < nbColor + 1; j++) {
				if (moveScore[i][j] != moveScore2[i][j]) {
					System.out.println("error");
					return false;
				}
			}
		}
		return true;
	}

	public void calAdjScore(int[] sol) {
		IntStream.range(1, G.verNum + 1).parallel().forEach(i -> {
			ArrayList<Integer> neighbors = G.getNeighbors(i);
			for (int v : neighbors) {
				synchronized (this) {
					this.adj_score[i][sol[v]] += 1;
				}
			}
		});
	}

}
